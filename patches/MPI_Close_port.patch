--- ./orig/MPI_Close_port.c	2019-02-19 14:42:37.000000001 -0500
+++ ./src/MPI_Close_port.c	2019-01-08 11:09:49.000000001 -0500
@@ -1,3 +1,68 @@
+/* 
+MPI_Close_port
+
+   Close a port previously opened by MPI_Open_port
+int MPI_Close_port(
+  char *port_name
+);
+
+int MPI_Close_port(
+  wchar_t *port_name
+);
+
+Parameters
+
+   port_name
+          [in] a port name (string)
+
+Remarks
+
+   This function releases the network address represented by port_name.
+
+Thread and Interrupt Safety
+
+   The user is responsible for ensuring that multiple threads do not try
+   to update the same MPI object from different threads. This routine
+   should not be used from within a signal handler.
+
+   The MPI standard defined a thread-safe interface but this does not mean
+   that all routines may be called without any thread locks. For example,
+   two threads must not attempt to change the contents of the same
+   MPI_Info object concurrently. The user is responsible in this case for
+   using some mechanism, such as thread locks, to ensure that only one
+   thread at a time makes use of this routine.
+
+Notes for Fortran
+
+   All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK) have
+   an additional argument ierr at the end of the argument list. ierr is an
+   integer and has the same meaning as the return value of the routine in
+   C. In Fortran, MPI routines are subroutines, and are invoked with the
+   call statement.
+
+   All MPI objects (e.g., MPI_Datatype, MPI_Comm) are of type INTEGER in
+   Fortran.
+
+Errors
+
+   All MPI routines (except MPI_Wtime and MPI_Wtick) return an error
+   value; C routines as the value of the function and Fortran routines in
+   the last argument. Before the value is returned, the current MPI error
+   handler is called. By default, this error handler aborts the MPI job.
+   The error handler may be changed with MPI_Comm_set_errhandler (for
+   communicators), MPI_File_set_errhandler (for files), and
+   MPI_Win_set_errhandler (for RMA windows). The MPI-1 routine
+   MPI_Errhandler_set may be used but its use is deprecated. The
+   predefined error handler MPI_ERRORS_RETURN may be used to cause error
+   values to be returned. Note that MPI does not guarentee that an MPI
+   program can continue past an error; however, MPI implementations will
+   attempt to continue whenever possible.
+
+   MPI_SUCCESS
+          No error; MPI routine completed successfully.
+
+*/
+ 
 // Copyright 2009 Deino Software. All rights reserved.
 // Source: http://mpi.deino.net/mpi_functions/index.htm
 
@@ -5,7 +70,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <windows.h> /* Sleep */
+//#include <windows.h> /* Sleep */
+#include <unistd.h>
 
 /* This test checks to make sure that two MPI_Comm_connects to two different MPI ports
 * match their corresponding MPI_Comm_accepts. The root process opens two MPI ports and
@@ -85,7 +151,8 @@
     {
         MPI_Recv(port2, MPI_MAX_PORT_NAME, MPI_CHAR, 0, 0, MPI_COMM_WORLD, &status);
         /* make sure process 1 has time to do the connect before this process attempts to connect */
-        Sleep(3000);
+        // Sleep(3000);     // windows
+	sleep(1);
         MPI_Comm_connect(port2, MPI_INFO_NULL, 0, MPI_COMM_SELF, &comm2);
         MPI_Recv(&data, 1, MPI_INT, 0, 0, comm2, &status);
         if (data != 2)
