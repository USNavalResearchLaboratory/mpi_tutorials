--- ./orig/MPI_Testall.c	2019-02-19 14:47:49.000000001 -0500
+++ ./src/MPI_Testall.c	2019-01-08 11:09:49.000000001 -0500
@@ -1,9 +1,143 @@
+/* 
+MPI_Testall
+
+   Tests for the completion of all previously initiated requests
+int MPI_Testall(
+  int count,
+  MPI_Request array_of_requests[],
+  int *flag,
+  MPI_Status array_of_statuses[]
+);
+
+Parameters
+
+   count
+          [in] lists length (integer)
+
+   array_of_requests
+          [in] array of requests (array of handles)
+
+   flag
+          [out] True if all requests have completed; false otherwise
+          (logical)
+
+   array_of_statuses
+          [out] array of status objects (array of Status). May be
+          MPI_STATUSES_IGNORE.
+
+Remarks
+
+   Returns flag = true if all communications associated with active
+   handles in the array have completed (this includes the case where no
+   handle in the list is active). In this case, each status entry that
+   corresponds to an active handle request is set to the status of the
+   corresponding communication; if the request was allocated by a
+   nonblocking communication call then it is deallocated, and the handle
+   is set to MPI_REQUEST_NULL. Each status entry that corresponds to a
+   null or inactive handle is set to empty.
+
+   Otherwise, flag = false is returned, no request is modified and the
+   values of the status entries are undefined. This is a local operation.
+
+   Errors that occurred during the execution of MPI_TESTALL are handled as
+   errors in MPI_WAITALL.
+   flag is true only if all requests have completed. Otherwise, flag is
+   false and neither the array_of_requests nor the array_of_statuses is
+   modified.
+
+   If one or more of the requests completes with an error,
+   MPI_ERR_IN_STATUS is returned. An error value will be present is
+   elements of array_of_status associated with the requests. Likewise, the
+   MPI_ERROR field in the status elements associated with requests that
+   have successfully completed will be MPI_SUCCESS. Finally, those
+   requests that have not completed will have a value of MPI_ERR_PENDING.
+
+   While it is possible to list a request handle more than once in the
+   array_of_requests, such an action is considered erroneous and may cause
+   the program to unexecpectedly terminate or produce incorrect results.
+
+Thread and Interrupt Safety
+
+   This routine is thread-safe. This means that this routine may be safely
+   used by multiple threads without the need for any user-provided thread
+   locks. However, the routine is not interrupt safe. Typically, this is
+   due to the use of memory allocation routines such as malloc or other
+   non-MPICH runtime routines that are themselves not interrupt-safe.
+
+Note on status for send operations
+
+   For send operations, the only use of status is for MPI_Test_cancelled
+   or in the case that there is an error, in which case the MPI_ERROR
+   field of status will be set.
+
+Notes for Fortran
+
+   All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK) have
+   an additional argument ierr at the end of the argument list. ierr is an
+   integer and has the same meaning as the return value of the routine in
+   C. In Fortran, MPI routines are subroutines, and are invoked with the
+   call statement.
+
+   All MPI objects (e.g., MPI_Datatype, MPI_Comm) are of type INTEGER in
+   Fortran.
+
+Errors
+
+   All MPI routines (except MPI_Wtime and MPI_Wtick) return an error
+   value; C routines as the value of the function and Fortran routines in
+   the last argument. Before the value is returned, the current MPI error
+   handler is called. By default, this error handler aborts the MPI job.
+   The error handler may be changed with MPI_Comm_set_errhandler (for
+   communicators), MPI_File_set_errhandler (for files), and
+   MPI_Win_set_errhandler (for RMA windows). The MPI-1 routine
+   MPI_Errhandler_set may be used but its use is deprecated. The
+   predefined error handler MPI_ERRORS_RETURN may be used to cause error
+   values to be returned. Note that MPI does not guarentee that an MPI
+   program can continue past an error; however, MPI implementations will
+   attempt to continue whenever possible.
+
+   MPI_SUCCESS
+          No error; MPI routine completed successfully.
+
+   MPI_ERR_IN_STATUS
+          The actual error value is in the MPI_Status argument. This error
+          class is returned only from the multiple-completion routines
+          (MPI_Testall, MPI_Testany, MPI_Testsome, MPI_Waitall,
+          MPI_Waitany, and MPI_Waitsome). The field MPI_ERROR in the
+          status argument contains the error value or MPI_SUCCESS (no
+          error and complete) or MPI_ERR_PENDING to indicate that the
+          request has not completed.
+
+   The MPI Standard does not specify what the result of the multiple
+   completion routines is when an error occurs. For example, in an
+   MPI_WAITALL, does the routine wait for all requests to either fail or
+   complete, or does it return immediately (with the MPI definition of
+   immediately, which means independent of actions of other MPI
+   processes)? MPICH has chosen to make the return immediate (alternately,
+   local in MPI terms), and to use the error class MPI_ERR_PENDING
+   (introduced in MPI 1.1) to indicate which requests have not completed.
+   In most cases, only one request with an error will be detected in each
+   call to an MPI routine that tests multiple requests. The requests that
+   have not been processed (because an error occured in one of the
+   requests) will have their MPI_ERROR field marked with MPI_ERR_PENDING.
+
+   MPI_ERR_REQUEST
+          Invalid MPI_Request. Either null or, in the case of a MPI_Start
+          or MPI_Startall, not a persistent request.
+
+   MPI_ERR_ARG
+          Invalid argument. Some argument is invalid and is not identified
+          by a specific error class (e.g., MPI_ERR_RANK).
+
+*/
+ 
 // Copyright 2009 Deino Software. All rights reserved.
 // Source: http://mpi.deino.net/mpi_functions/index.htm
 
 #include "mpi.h"
 #include <stdio.h>
-#include <windows.h>
+//#include <windows.h>
+#include <unistd.h>
 
 int main(int argc, char *argv[])
 {
@@ -34,7 +168,8 @@
         MPI_Testall(size-1, r, &flag, status);
         while (!flag)
         {
-	    Sleep(1);
+	    //Sleep(1);     // windows
+	    sleep(1);
             MPI_Testall(size-1, r, &flag, status);
         }
     }
