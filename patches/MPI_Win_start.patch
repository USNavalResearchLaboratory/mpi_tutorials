--- ./orig/MPI_Win_start.c	2019-02-19 13:52:59.000000001 -0500
+++ ./src/MPI_Win_start.c	2019-01-08 11:09:50.000000001 -0500
@@ -1,3 +1,96 @@
+/* 
+MPI_Win_start
+
+   Start an RMA access epoch for MPI
+int MPI_Win_start(
+  MPI_Group group,
+  int assert,
+  MPI_Win win
+);
+
+Parameters
+
+   group
+          [in] group of target processes (handle)
+
+   assert
+          [in] Used to optimize this call; zero may be used as a default.
+          See notes. (integer)
+
+   win
+          [in] window object (handle)
+
+Remarks
+
+   Starts an RMA access epoch for win. RMA calls issued on win during this
+   epoch must access only windows at processes in group. Each process in
+   group must issue a matching call to MPI_WIN_POST. RMA accesses to each
+   target window will be delayed, if necessary, until the target process
+   executed the matching call to MPI_WIN_POST. MPI_WIN_START is allowed to
+   block until the corresponding MPI_WIN_POST calls are executed, but is
+   not required to.
+
+   The assert argument is used to indicate special conditions for the
+   fence that an implementation may use to optimize the MPI_Win_start
+   operation. The value zero is always correct. Other assertion values may
+   be or'ed together. Assertions tha are valid for MPI_Win_start are:
+
+   MPI_MODE_NOCHECK
+          the matching calls to MPI_WIN_POST have already completed on all
+          target processes when the call to MPI_WIN_START is made. The
+          nocheck option can be specified in a start call if and only if
+          it is specified in each matching post call. This is similar to
+          the optimization of ready-send that may save a handshake when
+          the handshake is implicit in the code. (However, ready-send is
+          matched by a regular receive, whereas both start and post must
+          specify the nocheck option.)
+
+Thread and Interrupt Safety
+
+   This routine is thread-safe. This means that this routine may be safely
+   used by multiple threads without the need for any user-provided thread
+   locks. However, the routine is not interrupt safe. Typically, this is
+   due to the use of memory allocation routines such as malloc or other
+   non-MPICH runtime routines that are themselves not interrupt-safe.
+
+Notes for Fortran
+
+   All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK) have
+   an additional argument ierr at the end of the argument list. ierr is an
+   integer and has the same meaning as the return value of the routine in
+   C. In Fortran, MPI routines are subroutines, and are invoked with the
+   call statement.
+
+   All MPI objects (e.g., MPI_Datatype, MPI_Comm) are of type INTEGER in
+   Fortran.
+
+Errors
+
+   All MPI routines (except MPI_Wtime and MPI_Wtick) return an error
+   value; C routines as the value of the function and Fortran routines in
+   the last argument. Before the value is returned, the current MPI error
+   handler is called. By default, this error handler aborts the MPI job.
+   The error handler may be changed with MPI_Comm_set_errhandler (for
+   communicators), MPI_File_set_errhandler (for files), and
+   MPI_Win_set_errhandler (for RMA windows). The MPI-1 routine
+   MPI_Errhandler_set may be used but its use is deprecated. The
+   predefined error handler MPI_ERRORS_RETURN may be used to cause error
+   values to be returned. Note that MPI does not guarentee that an MPI
+   program can continue past an error; however, MPI implementations will
+   attempt to continue whenever possible.
+
+   MPI_SUCCESS
+          No error; MPI routine completed successfully.
+
+   MPI_ERR_WIN
+          Invalid MPI window object
+
+   MPI_ERR_OTHER
+          Other error; use MPI_Error_string to get more information about
+          this error code.
+
+*/
+ 
 // Copyright 2009 Deino Software. All rights reserved.
 // Source: http://mpi.deino.net/mpi_functions/index.htm
 
