--- ./orig/MPI_Get_count.c	2019-02-19 13:52:58.000000001 -0500
+++ ./src/MPI_Get_count.c	2019-01-08 11:09:49.000000001 -0500
@@ -1,3 +1,74 @@
+/* 
+MPI_Get_count
+
+   Gets the number of "top level" elements
+int MPI_Get_count(
+  MPI_Status *status,
+  MPI_Datatype datatype,
+  int *count
+);
+
+Parameters
+
+   status
+          [in] return status of receive operation (Status)
+
+   datatype
+          [in] datatype of each receive buffer element (handle)
+
+   count
+          [out] number of received elements (integer)
+
+Remarks
+
+   Returns the number of entries received. (Again, we count entries, each
+   of type datatype, not bytes.) The datatype argument should match the
+   argument provided by the receive call that set the status variable.
+   If the size of the datatype is zero, this routine will return a count
+   of zero. If the amount of data in status is not an exact multiple of
+   the size of datatype (so that count would not be integral), a count of
+   MPI_UNDEFINED is returned instead.
+
+   [] Rationale.
+
+   Some message passing libraries use INOUT count, tag and source
+   arguments, thus using them both to specify the selection criteria for
+   incoming messages and return the actual envelope values of the received
+   message. The use of a separate status argument prevents errors that are
+   often attached with INOUT argument (e.g., using the MPI_ANY_TAG
+   constant as the tag in a receive). Some libraries use calls that refer
+   implicitly to the "last message received." This is not thread safe.
+
+   The datatype argument is passed to MPI_GET_COUNT so as to improve
+   performance. A message might be received without counting the number of
+   elements it contains, and the count value is often not needed. Also,
+   this allows the same function to be used after a call to MPI_PROBE. (
+   End of rationale.)
+
+Errors
+
+   All MPI routines (except MPI_Wtime and MPI_Wtick) return an error
+   value; C routines as the value of the function and Fortran routines in
+   the last argument. Before the value is returned, the current MPI error
+   handler is called. By default, this error handler aborts the MPI job.
+   The error handler may be changed with MPI_Comm_set_errhandler (for
+   communicators), MPI_File_set_errhandler (for files), and
+   MPI_Win_set_errhandler (for RMA windows). The MPI-1 routine
+   MPI_Errhandler_set may be used but its use is deprecated. The
+   predefined error handler MPI_ERRORS_RETURN may be used to cause error
+   values to be returned. Note that MPI does not guarentee that an MPI
+   program can continue past an error; however, MPI implementations will
+   attempt to continue whenever possible.
+
+   MPI_SUCCESS
+          No error; MPI routine completed successfully.
+
+   MPI_ERR_TYPE
+          Invalid datatype argument. May be an uncommitted MPI_Datatype
+          (see MPI_Type_commit).
+
+*/
+ 
 // Copyright 2009 Deino Software. All rights reserved.
 // Source: http://mpi.deino.net/mpi_functions/index.htm
 
