--- ./orig/MPI_Probe.c	2019-02-19 13:52:58.000000001 -0500
+++ ./src/MPI_Probe.c	2019-01-08 11:09:49.000000001 -0500
@@ -1,3 +1,98 @@
+/* 
+MPI_Probe
+
+   Blocking test for a message
+int MPI_Probe(
+  int source,
+  int tag,
+  MPI_Comm comm,
+  MPI_Status *status
+);
+
+Parameters
+
+   source
+          [in] source rank, or MPI_ANY_SOURCE (integer)
+
+   tag
+          [in] tag value or MPI_ANY_TAG (integer)
+
+   comm
+          [in] communicator (handle)
+
+   status
+          [out] status object (Status)
+
+Remarks
+
+   MPI_PROBE behaves like MPI_IPROBE except that it is a blocking call
+   that returns only after a matching message has been found.
+
+   The MPI implementation of MPI_PROBE and MPI_IPROBE needs to guarantee
+   progress: if a call to MPI_PROBE has been issued by a process, and a
+   send that matches the probe has been initiated by some process, then
+   the call to MPI_PROBE will return, unless the message is received by
+   another concurrent receive operation (that is executed by another
+   thread at the probing process). Similarly, if a process busy waits with
+   MPI_IPROBE and a matching message has been issued, then the call to
+   MPI_IPROBE will eventually return flag = true unless the message is
+   received by another concurrent receive operation.
+
+Thread and Interrupt Safety
+
+   This routine is thread-safe. This means that this routine may be safely
+   used by multiple threads without the need for any user-provided thread
+   locks. However, the routine is not interrupt safe. Typically, this is
+   due to the use of memory allocation routines such as malloc or other
+   non-MPICH runtime routines that are themselves not interrupt-safe.
+
+Notes for Fortran
+
+   All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK) have
+   an additional argument ierr at the end of the argument list. ierr is an
+   integer and has the same meaning as the return value of the routine in
+   C. In Fortran, MPI routines are subroutines, and are invoked with the
+   call statement.
+
+   All MPI objects (e.g., MPI_Datatype, MPI_Comm) are of type INTEGER in
+   Fortran.
+
+Errors
+
+   All MPI routines (except MPI_Wtime and MPI_Wtick) return an error
+   value; C routines as the value of the function and Fortran routines in
+   the last argument. Before the value is returned, the current MPI error
+   handler is called. By default, this error handler aborts the MPI job.
+   The error handler may be changed with MPI_Comm_set_errhandler (for
+   communicators), MPI_File_set_errhandler (for files), and
+   MPI_Win_set_errhandler (for RMA windows). The MPI-1 routine
+   MPI_Errhandler_set may be used but its use is deprecated. The
+   predefined error handler MPI_ERRORS_RETURN may be used to cause error
+   values to be returned. Note that MPI does not guarentee that an MPI
+   program can continue past an error; however, MPI implementations will
+   attempt to continue whenever possible.
+
+   MPI_SUCCESS
+          No error; MPI routine completed successfully.
+
+   MPI_ERR_COMM
+          Invalid communicator. A common error is to use a null
+          communicator in a call (not even allowed in MPI_Comm_rank).
+
+   MPI_ERR_TAG
+          Invalid tag argument. Tags must be non-negative; tags in a
+          receive (MPI_Recv, MPI_Irecv, MPI_Sendrecv, etc.) may also be
+          MPI_ANY_TAG. The largest tag value is available through the the
+          attribute MPI_TAG_UB.
+
+   MPI_ERR_RANK
+          Invalid source or destination rank. Ranks must be between zero
+          and the size of the communicator minus one; ranks in a receive
+          (MPI_Recv, MPI_Irecv, MPI_Sendrecv, etc.) may also be
+          MPI_ANY_SOURCE.
+
+*/
+ 
 // Copyright 2009 Deino Software. All rights reserved.
 // Source: http://mpi.deino.net/mpi_functions/index.htm
 
