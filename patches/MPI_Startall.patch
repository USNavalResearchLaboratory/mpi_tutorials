--- ./orig/MPI_Startall.c	2019-02-19 13:52:58.000000001 -0500
+++ ./src/MPI_Startall.c	2019-01-08 11:09:49.000000001 -0500
@@ -1,3 +1,106 @@
+/* 
+MPI_Startall
+
+   Starts a collection of persistent requests
+int MPI_Startall(
+  int count,
+  MPI_Request array_of_requests[]
+);
+
+Parameters
+
+   count
+          [in] list length (integer)
+
+   array_of_requests
+          [in] array of requests (array of handle)
+
+Remarks
+
+   Start all communications associated with requests in array_of_requests.
+   A call to
+   MPI_STARTALL(count, array_of_requests) has the same effect as calls to
+   MPI_START (&array_of_requests[i]),executed for i=0 ,..., count-1, in
+   some arbitrary order.
+
+   A communication started with a call to MPI_START or MPI_STARTALL is
+   completed by a call to MPI_WAIT, MPI_TEST, or one of the derived
+   functions. The request becomes inactive after successful completion of
+   such call. The request is not deallocated and it can be activated anew
+   by an MPI_START or MPI_STARTALL call.
+
+   A persistent request is deallocated by a call to MPI_REQUEST_FREE.
+
+   The call to MPI_REQUEST_FREE can occur at any point in the program
+   after the persistent request was created. However, the request will be
+   deallocated only after it becomes inactive. Active receive requests
+   should not be freed. Otherwise, it will not be possible to check that
+   the receive has completed. It is preferable, in general, to free
+   requests when they are inactive. If this rule is followed, then the
+   functions described in this section will be invoked in a sequence of
+   the form, Create (Start Complete)* Free, where * indicates zero or more
+   repetitions. If the same communication object is used in several
+   concurrent threads, it is the user's responsibility to coordinate calls
+   so that the correct sequence is obeyed.
+
+   A send operation initiated with MPI_START can be matched with any
+   receive operation and, likewise, a receive operation initiated with
+   MPI_START can receive messages generated by any send operation.
+
+   Unlike MPI_Waitall, MPI_Startall does not provide a mechanism for
+   returning multiple errors nor pinpointing the request(s) involved.
+   Futhermore, the behavior of MPI_Startall after an error occurs is not
+   defined by the MPI standard. If well-defined error reporting and
+   behavior are required, multiple calls to MPI_Start should be used
+   instead.
+
+Thread and Interrupt Safety
+
+   This routine is thread-safe. This means that this routine may be safely
+   used by multiple threads without the need for any user-provided thread
+   locks. However, the routine is not interrupt safe. Typically, this is
+   due to the use of memory allocation routines such as malloc or other
+   non-MPICH runtime routines that are themselves not interrupt-safe.
+
+Notes for Fortran
+
+   All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK) have
+   an additional argument ierr at the end of the argument list. ierr is an
+   integer and has the same meaning as the return value of the routine in
+   C. In Fortran, MPI routines are subroutines, and are invoked with the
+   call statement.
+
+   All MPI objects (e.g., MPI_Datatype, MPI_Comm) are of type INTEGER in
+   Fortran.
+
+Errors
+
+   All MPI routines (except MPI_Wtime and MPI_Wtick) return an error
+   value; C routines as the value of the function and Fortran routines in
+   the last argument. Before the value is returned, the current MPI error
+   handler is called. By default, this error handler aborts the MPI job.
+   The error handler may be changed with MPI_Comm_set_errhandler (for
+   communicators), MPI_File_set_errhandler (for files), and
+   MPI_Win_set_errhandler (for RMA windows). The MPI-1 routine
+   MPI_Errhandler_set may be used but its use is deprecated. The
+   predefined error handler MPI_ERRORS_RETURN may be used to cause error
+   values to be returned. Note that MPI does not guarentee that an MPI
+   program can continue past an error; however, MPI implementations will
+   attempt to continue whenever possible.
+
+   MPI_SUCCESS
+          No error; MPI routine completed successfully.
+
+   MPI_ERR_ARG
+          Invalid argument. Some argument is invalid and is not identified
+          by a specific error class (e.g., MPI_ERR_RANK).
+
+   MPI_ERR_REQUEST
+          Invalid MPI_Request. Either null or, in the case of a MPI_Start
+          or MPI_Startall, not a persistent request.
+
+*/
+ 
 // Copyright 2009 Deino Software. All rights reserved.
 // Source: http://mpi.deino.net/mpi_functions/index.htm
 
