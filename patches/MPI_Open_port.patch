--- ./orig/MPI_Open_port.c	2019-02-19 14:01:41.000000001 -0500
+++ ./src/MPI_Open_port.c	2019-01-08 11:09:49.000000001 -0500
@@ -1,3 +1,97 @@
+/* 
+MPI_Open_port
+
+   Establish an address that can be used to establish connections between
+   groups of MPI processes
+int MPI_Open_port(
+  MPI_Info info,
+  char *port_name
+);
+
+int MPI_Open_port(
+  MPI_Info info,
+  wchar_t *port_name
+);
+
+Parameters
+
+   info
+          [in] implementation-specific information on how to establish a
+          port for MPI_Comm_accept (handle)
+
+   port_name
+          [out] newly established port (string)
+
+Remarks
+
+   MPI copies a system-supplied port name into port_name. port_name
+   identifies the newly opened port and can be used by a client to contact
+   the server. The maximum size string that may be supplied by the system
+   is MPI_MAX_PORT_NAME.
+
+   This function establishes a network address, encoded in the port_name
+   string, at which the server will be able to accept connections from
+   clients. port_name is supplied by the system, possibly using
+   information in the info argument.
+
+   MPI copies a system-supplied port name into port_name. port_name
+   identifies the newly opened port and can be used by a client to contact
+   the server. The maximum size string that may be supplied by the system
+   is MPI_MAX_PORT_NAME.
+   Advice to users.
+
+   The system copies the port name into port_name. The application must
+   pass a buffer of sufficient size to hold this value.
+
+Reserved Info Key Values
+
+   ip_port
+          Value contains IP port number at which to establish a port.
+
+   ip_address
+          Value contains IP address at which to establish a port. If the
+          address is not a valid IP address of the host on which the
+          MPI_OPEN_PORT call is made, the results are undefined.
+
+Thread and Interrupt Safety
+
+   This routine is thread-safe. This means that this routine may be safely
+   used by multiple threads without the need for any user-provided thread
+   locks. However, the routine is not interrupt safe. Typically, this is
+   due to the use of memory allocation routines such as malloc or other
+   non-MPICH runtime routines that are themselves not interrupt-safe.
+
+Notes for Fortran
+
+   All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK) have
+   an additional argument ierr at the end of the argument list. ierr is an
+   integer and has the same meaning as the return value of the routine in
+   C. In Fortran, MPI routines are subroutines, and are invoked with the
+   call statement.
+
+   All MPI objects (e.g., MPI_Datatype, MPI_Comm) are of type INTEGER in
+   Fortran.
+
+Errors
+
+   All MPI routines (except MPI_Wtime and MPI_Wtick) return an error
+   value; C routines as the value of the function and Fortran routines in
+   the last argument. Before the value is returned, the current MPI error
+   handler is called. By default, this error handler aborts the MPI job.
+   The error handler may be changed with MPI_Comm_set_errhandler (for
+   communicators), MPI_File_set_errhandler (for files), and
+   MPI_Win_set_errhandler (for RMA windows). The MPI-1 routine
+   MPI_Errhandler_set may be used but its use is deprecated. The
+   predefined error handler MPI_ERRORS_RETURN may be used to cause error
+   values to be returned. Note that MPI does not guarentee that an MPI
+   program can continue past an error; however, MPI implementations will
+   attempt to continue whenever possible.
+
+   MPI_SUCCESS
+          No error; MPI routine completed successfully.
+
+*/
+ 
 // Copyright 2009 Deino Software. All rights reserved.
 // Source: http://mpi.deino.net/mpi_functions/index.htm
 
@@ -5,7 +99,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <windows.h> /* Sleep */
+//#include <windows.h> /* Sleep */
+#include <unistd.h>
 
 /* This test checks to make sure that two MPI_Comm_connects to two different MPI ports
 * match their corresponding MPI_Comm_accepts. The root process opens two MPI ports and
@@ -83,7 +178,8 @@
     {
         MPI_Recv(port2, MPI_MAX_PORT_NAME, MPI_CHAR, 0, 0, MPI_COMM_WORLD, &status);
         /* make sure process 1 has time to do the connect before this process attempts to connect */
-        Sleep(3000);
+        //Sleep(3000);
+	sleep(1);
         MPI_Comm_connect(port2, MPI_INFO_NULL, 0, MPI_COMM_SELF, &comm2);
         MPI_Recv(&data, 1, MPI_INT, 0, 0, comm2, &status);
         if (data != 2)
