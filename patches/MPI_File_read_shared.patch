--- ./orig/MPI_File_read_shared.c	2019-02-19 13:52:58.000000001 -0500
+++ ./src/MPI_File_read_shared.c	2019-01-08 11:09:49.000000001 -0500
@@ -1,3 +1,63 @@
+/* 
+MPI_File_read_shared
+
+   Read using shared file pointer
+int MPI_File_read_shared(
+  MPI_File mpi_fh,
+  void *buf,
+  int count,
+  MPI_Datatype datatype,
+  MPI_Status *status
+);
+
+Parameters
+
+   mpi_fh
+          [in] file handle (handle)
+
+   buf
+          [out] initial address of buffer (choice)
+
+   count
+          [in] number of elements in buffer (nonnegative integer)
+
+   datatype
+          [in] datatype of each buffer element (handle)
+
+   status
+          [out] status object (Status)
+
+Remarks
+
+   MPI_FILE_READ_SHARED reads a file using the shared file pointer.
+
+   MPI maintains exactly one shared file pointer per collective
+   MPI_FILE_OPEN (shared among processes in the communicator group). The
+   current value of this pointer implicitly specifies the offset in the
+   data access routines described in this section. These routines only use
+   and update the shared file pointer maintained by MPI. The individual
+   file pointers are not used nor updated.
+
+   The shared file pointer routines have the same semantics as the data
+   access with explicit offset routines with the following modifications:
+     * the offset is defined to be the current value of the MPI-maintained
+       shared file pointer,
+     * the effect of multiple calls to shared file pointer routines is
+       defined to behave as if the calls were serialized, and
+     * the use of shared file pointer routines is erroneous unless all
+       processes use the same file view.
+
+   For the noncollective shared file pointer routines, the serialization
+   ordering is not deterministic. The user needs to use other
+   synchronization means to enforce a specific order.
+
+   After a shared file pointer operation is initiated, the shared file
+   pointer is updated to point to the next etype after the last one that
+   will be accessed. The file pointer is updated relative to the current
+   view of the file.
+
+*/
+ 
 // Copyright 2009 Deino Software. All rights reserved.
 // Source: http://mpi.deino.net/mpi_functions/index.htm
 
