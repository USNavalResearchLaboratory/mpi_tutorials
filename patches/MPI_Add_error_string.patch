--- ./orig/MPI_Add_error_string.c	2019-02-19 13:52:57.000000001 -0500
+++ ./src/MPI_Add_error_string.c	2019-01-08 11:09:49.000000001 -0500
@@ -1,3 +1,83 @@
+/* 
+MPI_Add_error_string
+
+   Associates an error string with an MPI error code or class
+int MPI_Add_error_string(
+  int errorcode,
+  char *string
+);
+
+int MPI_Add_error_string(
+  int errorcode,
+  wchar_t *string
+);
+
+Parameters
+
+   errorcode
+          [in] error code or class (integer)
+
+   string
+          [in] text corresponding to errorcode (string)
+
+Remarks
+
+   Associates an error string with an error code or class. The string must
+   be no more than MPI_MAX_ERROR_STRING characters long. The length of the
+   string is as defined in the calling language. The length of the string
+   does not include the null terminator in C or C++. Trailing blanks will
+   be stripped in Fortran. Calling MPI_ADD_ERROR_STRING for an errorcode
+   that already has a string will replace the old string with the new
+   string.  Note that the string is const even though the MPI standard
+   does not specify it that way.
+
+   According to the MPI-2 standard, it is erroneous to call
+   MPI_Add_error_string for an error code or class with a value less than
+   or equal to MPI_ERR_LASTCODE. Thus, you cannot replace the predefined
+   error messages with this routine.
+
+   If MPI_ERROR_STRING is called when no string has been set, it will
+   return a empty string (all spaces in Fortran, "" in C and C++).
+
+Thread and Interrupt Safety
+
+   This routine is thread-safe. This means that this routine may be safely
+   used by multiple threads without the need for any user-provided thread
+   locks. However, the routine is not interrupt safe. Typically, this is
+   due to the use of memory allocation routines such as malloc or other
+   non-MPICH runtime routines that are themselves not interrupt-safe.
+
+Notes for Fortran
+
+   All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK) have
+   an additional argument ierr at the end of the argument list. ierr is an
+   integer and has the same meaning as the return value of the routine in
+   C. In Fortran, MPI routines are subroutines, and are invoked with the
+   call statement.
+
+   All MPI objects (e.g., MPI_Datatype, MPI_Comm) are of type INTEGER in
+   Fortran.
+
+Errors
+
+   All MPI routines (except MPI_Wtime and MPI_Wtick) return an error
+   value; C routines as the value of the function and Fortran routines in
+   the last argument. Before the value is returned, the current MPI error
+   handler is called. By default, this error handler aborts the MPI job.
+   The error handler may be changed with MPI_Comm_set_errhandler (for
+   communicators), MPI_File_set_errhandler (for files), and
+   MPI_Win_set_errhandler (for RMA windows). The MPI-1 routine
+   MPI_Errhandler_set may be used but its use is deprecated. The
+   predefined error handler MPI_ERRORS_RETURN may be used to cause error
+   values to be returned. Note that MPI does not guarentee that an MPI
+   program can continue past an error; however, MPI implementations will
+   attempt to continue whenever possible.
+
+   MPI_SUCCESS
+          No error; MPI routine completed successfully.
+
+*/
+ 
 // Copyright 2009 Deino Software. All rights reserved.
 // Source: http://mpi.deino.net/mpi_functions/index.htm
 
