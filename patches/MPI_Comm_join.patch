--- ./orig/MPI_Comm_join.c	2019-02-19 13:59:33.000000001 -0500
+++ ./src/MPI_Comm_join.c	2019-01-08 11:09:49.000000001 -0500
@@ -1,10 +1,96 @@
+/* 
+MPI_Comm_join
+
+   Create a communicator by joining two processes connected by a socket.
+int MPI_Comm_join(
+  int fd,
+  MPI_Comm *intercomm
+);
+
+Parameters
+
+   fd
+          [in] socket file descriptor
+
+   intercomm
+          [out] new intercommunicator (handle)
+
+Remarks
+
+   MPI_COMM_JOIN is intended for MPI implementations that exist in an
+   environment supporting the Berkeley Socket interface [14,17].
+   Implementations that exist in an environment not supporting Berkeley
+   Sockets should provide the entry point for MPI_COMM_JOIN and should
+   return MPI_COMM_NULL.
+
+   This call creates an intercommunicator from the union of two MPI
+   processes which are connected by a socket. MPI_COMM_JOIN should
+   normally succeed if the local and remote processes have access to the
+   same implementation-defined MPI communication universe.
+
+   The socket must be quiescent before MPI_COMM_JOIN is called and after
+   MPI_COMM_JOIN returns. More specifically, on entry to MPI_COMM_JOIN, a
+   read on the socket will not read any data that was written to the
+   socket before the remote process called MPI_COMM_JOIN.
+
+   Advice to users. An MPI implementation may require a specific
+   communication medium for MPI communication, such as a shared memory
+   segment or a special switch. In this case, it may not be possible for
+   two processes to successfully join even if there is a socket connecting
+   them and they are using the same MPI implementation.
+
+Thread and Interrupt Safety
+
+   This routine is thread-safe. This means that this routine may be safely
+   used by multiple threads without the need for any user-provided thread
+   locks. However, the routine is not interrupt safe. Typically, this is
+   due to the use of memory allocation routines such as malloc or other
+   non-MPICH runtime routines that are themselves not interrupt-safe.
+
+Notes for Fortran
+
+   All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK) have
+   an additional argument ierr at the end of the argument list. ierr is an
+   integer and has the same meaning as the return value of the routine in
+   C. In Fortran, MPI routines are subroutines, and are invoked with the
+   call statement.
+
+   All MPI objects (e.g., MPI_Datatype, MPI_Comm) are of type INTEGER in
+   Fortran.
+
+Errors
+
+   All MPI routines (except MPI_Wtime and MPI_Wtick) return an error
+   value; C routines as the value of the function and Fortran routines in
+   the last argument. Before the value is returned, the current MPI error
+   handler is called. By default, this error handler aborts the MPI job.
+   The error handler may be changed with MPI_Comm_set_errhandler (for
+   communicators), MPI_File_set_errhandler (for files), and
+   MPI_Win_set_errhandler (for RMA windows). The MPI-1 routine
+   MPI_Errhandler_set may be used but its use is deprecated. The
+   predefined error handler MPI_ERRORS_RETURN may be used to cause error
+   values to be returned. Note that MPI does not guarentee that an MPI
+   program can continue past an error; however, MPI implementations will
+   attempt to continue whenever possible.
+
+   MPI_SUCCESS
+          No error; MPI routine completed successfully.
+
+   MPI_ERR_ARG
+          Invalid argument. Some argument is invalid and is not identified
+          by a specific error class (e.g., MPI_ERR_RANK).
+
+*/
+ 
 // Copyright 2009 Deino Software. All rights reserved.
 // Source: http://mpi.deino.net/mpi_functions/index.htm
 
 #include "mpi.h"
 #include <stdio.h>
-#include <winsock2.h> 
-#include <ws2tcpip.h> /* socklen_t */
+//#include <winsock2.h>   // Windows
+#include <netdb.h>       // Linux
+//#include <ws2tcpip.h> /* socklen_t */   // Windows
+#include <sys/socket.h>  // Linux  ( socklen_t )
 #include <string.h>
 
 #define COUNT 1024
