--- ./orig/MPI_Irecv.c	2019-02-19 13:52:58.000000001 -0500
+++ ./src/MPI_Irecv.c	2019-01-08 11:09:49.000000001 -0500
@@ -1,3 +1,121 @@
+/* 
+MPI_Irecv
+
+   Begins a nonblocking receive
+int MPI_Irecv(
+  void *buf,
+  int count,
+  MPI_Datatype datatype,
+  int source,
+  int tag,
+  MPI_Comm comm,
+  MPI_Request *request
+);
+
+Parameters
+
+   buf
+          [in] initial address of receive buffer (choice)
+
+   count
+          [in] number of elements in receive buffer (integer)
+
+   datatype
+          [in] datatype of each receive buffer element (handle)
+
+   source
+          [in] rank of source (integer)
+
+   tag
+          [in] message tag (integer)
+
+   comm
+          [in] communicator (handle)
+
+   request
+          [out] communication request (handle)
+
+Remarks
+
+   Start a nonblocking receive.
+
+   These calls allocate a communication request object and associate it
+   with the request handle (the argument request). The request can be used
+   later to query the status of the communication or wait for its
+   completion.
+
+   A nonblocking receive call indicates that the system may start writing
+   data into the receive buffer. The receiver should not access any part
+   of the receive buffer after a nonblocking receive operation is called,
+   until the receive completes.
+
+Thread and Interrupt Safety
+
+   This routine is thread-safe. This means that this routine may be safely
+   used by multiple threads without the need for any user-provided thread
+   locks. However, the routine is not interrupt safe. Typically, this is
+   due to the use of memory allocation routines such as malloc or other
+   non-MPICH runtime routines that are themselves not interrupt-safe.
+
+Notes for Fortran
+
+   All MPI routines in Fortran (except for MPI_WTIME and MPI_WTICK) have
+   an additional argument ierr at the end of the argument list. ierr is an
+   integer and has the same meaning as the return value of the routine in
+   C. In Fortran, MPI routines are subroutines, and are invoked with the
+   call statement.
+
+   All MPI objects (e.g., MPI_Datatype, MPI_Comm) are of type INTEGER in
+   Fortran.
+
+Errors
+
+   All MPI routines (except MPI_Wtime and MPI_Wtick) return an error
+   value; C routines as the value of the function and Fortran routines in
+   the last argument. Before the value is returned, the current MPI error
+   handler is called. By default, this error handler aborts the MPI job.
+   The error handler may be changed with MPI_Comm_set_errhandler (for
+   communicators), MPI_File_set_errhandler (for files), and
+   MPI_Win_set_errhandler (for RMA windows). The MPI-1 routine
+   MPI_Errhandler_set may be used but its use is deprecated. The
+   predefined error handler MPI_ERRORS_RETURN may be used to cause error
+   values to be returned. Note that MPI does not guarentee that an MPI
+   program can continue past an error; however, MPI implementations will
+   attempt to continue whenever possible.
+
+   MPI_SUCCESS
+          No error; MPI routine completed successfully.
+
+   MPI_ERR_COMM
+          Invalid communicator. A common error is to use a null
+          communicator in a call (not even allowed in MPI_Comm_rank).
+
+   MPI_ERR_COUNT
+          Invalid count argument. Count arguments must be non-negative; a
+          count of zero is often valid.
+
+   MPI_ERR_TYPE
+          Invalid datatype argument. May be an uncommitted MPI_Datatype
+          (see MPI_Type_commit).
+
+   MPI_ERR_TAG
+          Invalid tag argument. Tags must be non-negative; tags in a
+          receive (MPI_Recv, MPI_Irecv, MPI_Sendrecv, etc.) may also be
+          MPI_ANY_TAG. The largest tag value is available through the the
+          attribute MPI_TAG_UB.
+
+   MPI_ERR_RANK
+          Invalid source or destination rank. Ranks must be between zero
+          and the size of the communicator minus one; ranks in a receive
+          (MPI_Recv, MPI_Irecv, MPI_Sendrecv, etc.) may also be
+          MPI_ANY_SOURCE.
+
+   MPI_ERR_INTERN
+          This error is returned when some part of the MPICH
+          implementation is unable to acquire memory.
+
+*/
+ 
 // Copyright 2009 Deino Software. All rights reserved.
 // Source: http://mpi.deino.net/mpi_functions/index.htm
 
